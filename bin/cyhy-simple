#!/usr/bin/env python

"""Parses a simple request (INI) and outputs a JSON request.

Usage:
  cyhy-simple [options] FILENAME
  cyhy-simple (-b | --blank)
  cyhy-simple (-h | --help)
  cyhy-simple --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.

  -b --blank                     Output a blank form.
  -f --force                     Override warnings and do it anyway.
  -n --networks                  Output networks only.
  -s SECTION --section=SECTION   Configuration section to use.
"""

from __future__ import print_function

import datetime
import os
import sys

from docopt import docopt
import netaddr

from cyhy.db import database
from cyhy.util import util
from cyhy.core.common import (
    AGENCY_TYPE,
    POC_TYPE,
    REPORT_PERIOD,
    REPORT_TYPE,
    SCAN_TYPE,
)

if sys.version_info.major == 2:
    from ConfigParser import SafeConfigParser
else:
    from configparser import SafeConfigParser

THE_VERY_DISTANT_FUTURE = datetime.datetime(9999, 1, 1, 0, 0)
AGENCY = "AGENCY"
POC = "POC"
NETWORKS = "NETWORKS"
NAME = "name"
EMAIL = "email"
PHONE = "phone"
ACRONYM = "acronym"
TYPE = "type"
STAKEHOLDER = "stakeholder"
SCAN_TYPES = "scan_types"
KEY = "key"
REPORTING = "REPORTING"
RPT_TYPES = "report_types"
RPT_PERIOD = "report_period"
LOCATION = "location"
GNIS_ID = "gnis_id"


def write_blank_config():
    """Create a blank configuration file."""
    config = SafeConfigParser()
    config.add_section(AGENCY)
    config.add_section(POC)
    config.add_section(NETWORKS)
    config.add_section(REPORTING)
    config.set(AGENCY, NAME, "")
    config.set(AGENCY, ACRONYM, "")
    config.set(AGENCY, KEY, "")
    config.set(AGENCY, TYPE, "")
    config.set(AGENCY, STAKEHOLDER, "")
    config.set(AGENCY, SCAN_TYPES, "")
    config.set(AGENCY, GNIS_ID, "")
    config.set(POC, NAME, "")
    config.set(POC, EMAIL, "")
    config.set(POC, PHONE, "")
    config.set(POC, TYPE, "")  # addition for POC types
    config.set(REPORTING, RPT_TYPES, "")
    config.set(REPORTING, RPT_PERIOD, "")
    config.write(sys.stdout)


def get_location_details(mongo_db, gnis_id):
    """Get a dictionary containing details for the provided GNIS ID."""
    try:
        # MIGRATION : long() is Py2 only, replace with int()
        gnis_id = long(gnis_id)
    except ValueError:
        print(
            "Invalid GNIS ID: {} (must be a long integer)".format(gnis_id),
            file=sys.stderr,
        )
        sys.exit(-1)
    place = mongo_db.PlaceDoc.find_one({"_id": gnis_id})
    if place:
        location_dict = {
            "gnis_id": gnis_id,
            "name": place["name"],
            "state": place["state"],
            "state_fips": place["state_fips"],
            "state_name": place["state_name"],
            "county": place["county"],
            "county_fips": place["county_fips"],
            "country": place["country"],
            "country_name": place["country_name"],
        }
        return location_dict
    else:
        print("GNIS ID {} not found in database!".format(gnis_id), file=sys.stderr)
        sys.exit(-1)


def fill_in(mongo_db, filename, force=False):
    """Create a RequestDoc from the provided file."""
    request = mongo_db.RequestDoc()
    config = SafeConfigParser(allow_no_value=True)
    config.read([filename])
    # import IPython; IPython.embed() #<<< BREAKPOINT >>>

    request["period_start"] = THE_VERY_DISTANT_FUTURE
    request["agency"] = dict()
    request["agency"][NAME] = config.get(AGENCY, NAME)
    request["agency"][ACRONYM] = config.get(AGENCY, ACRONYM)
    request["agency"][TYPE] = config.get(AGENCY, TYPE)
    request["agency"][LOCATION] = get_location_details(
        mongo_db, config.get(AGENCY, GNIS_ID)
    )
    request[KEY] = config.get(AGENCY, KEY, raw=True)
    request["_id"] = config.get(AGENCY, ACRONYM)
    request[STAKEHOLDER] = bool(config.get(AGENCY, STAKEHOLDER).lower() == "true")
    if config.get(AGENCY, SCAN_TYPES):
        request[SCAN_TYPES] = config.get(AGENCY, SCAN_TYPES).replace(" ", "").split(",")
    if config.get(REPORTING, RPT_TYPES):
        request[RPT_TYPES] = (
            config.get(REPORTING, RPT_TYPES).replace(" ", "").split(",")
        )

    if REPORTING in config.sections() and config.has_option(REPORTING, RPT_PERIOD):
        if config.get(REPORTING, RPT_PERIOD):
            request[RPT_PERIOD] = config.get(REPORTING, RPT_PERIOD)

    pocs = [section for section in config.sections() if section.startswith("POC")]
    request["agency"]["contacts"] = []
    for poc in pocs:
        contact = {
            NAME: config.get(poc, NAME),
            PHONE: config.get(poc, PHONE),
            EMAIL: config.get(poc, EMAIL),
            TYPE: config.get(poc, TYPE),  # addition for POC types
        }
        request["agency"]["contacts"].append(contact)

    if request["agency"][TYPE] not in AGENCY_TYPE:
        print(
            "Agency type is '{}' - must be one of {}".format(
                request["agency"][TYPE], AGENCY_TYPE,
            ),
            file=sys.stderr,
        )
        sys.exit(-1)

    if request.get(SCAN_TYPES):
        for scan_type in request[SCAN_TYPES]:
            if scan_type not in SCAN_TYPE:
                print(
                    "Unknown scan type '{!s}' - must be one of {!s}".format(
                        scan_type, SCAN_TYPE,
                    ),
                    file=sys.stderr,
                )
                sys.exit(-1)

    if request.get(RPT_TYPES):
        for report_type in request[RPT_TYPES]:
            if report_type not in REPORT_TYPE:
                print(
                    "Unknown report type '{!s}' - must be one of {!s}".format(
                        report_type, REPORT_TYPE,
                    ),
                    file=sys.stderr,
                )
                sys.exit(-1)

    if request.get(RPT_PERIOD):
        if request[RPT_PERIOD] not in REPORT_PERIOD:
            print(
                "Report period is '{!s}' - must be one of {!s}".format(
                    request[RPT_PERIOD], REPORT_PERIOD,
                ),
                file=sys.stderr,
            )
            sys.exit(-1)

    contacts = request["agency"]["contacts"]
    if contacts:
        print("No POCs associated with agency", file=sys.stderr)
        if not force:
            sys.exit(-1)
        else:
            print(
                "Continuing DESPITE WARNING because --force option is on",
                file=sys.stderr,
            )

    for contact in contacts:
        if contact[TYPE] not in POC_TYPE:
            print(
                "POC type is '{!s}' - must be one of {!s}".format(
                    contact[TYPE], POC_TYPE,
                ),
                file=sys.stderr,
            )
            sys.exit(-1)

        email = contact[EMAIL]
        if email is None or email == "":
            print("All POCs must have an associated email", file=sys.stderr)
            if not force:
                sys.exit(-1)
            else:
                print(
                    "Continuing DESPITE WARNING because --force option is on",
                    file=sys.stderr,
                )

    nets = netaddr.IPSet()
    for ip_addr in config.options(NETWORKS):
        if ip_addr.find("-") != -1:
            # handle a range
            start, end = ip_addr.split("-")
            ip_range = netaddr.IPRange(start.strip(), end.strip())
            for i in ip_range.cidrs():
                nets.add(i)
        else:
            # handle single cidr
            net = netaddr.IPNetwork(ip_addr)
            nets.add(net)

    request.add_networks(nets)

    return request


def main():
    """Generate a JSON file from a given request text file."""
    args = docopt(__doc__, version="v0.0.2")

    if args["--blank"]:
        write_blank_config()
        sys.exit(0)

    mongo_db = database.db_from_config(args["--section"])

    if not os.path.isfile(args["FILENAME"]):
        print("File not found:", args["FILENAME"], file=sys.stderr)
        sys.exit(-1)

    request = fill_in(mongo_db, args["FILENAME"], args["--force"])

    if args["--networks"]:
        for network in request["networks"]:
            print(network)
    else:
        util.pp(request)


if __name__ == "__main__":
    main()
    # import IPython; IPython.embed() #<<< BREAKPOINT >>>
