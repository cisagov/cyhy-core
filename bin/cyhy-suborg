#!/usr/bin/env python

'''Manage parent and children organizations.

Usage:
  cyhy-suborg [options] import-child PARENT_ORG_ID CHILD_ORG_IMPORT_FILE
  cyhy-suborg [options] (add-children | remove-children) PARENT_ORG_ID CHILD_ORG_IDS ...
  cyhy-suborg [options] (list-children | list-all-descendants) PARENT_ORG_ID
  cyhy-suborg (-h | --help)
  cyhy-suborg --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.
  -s SECTION --section=SECTION   Configuration section to use.
  -r --include-retired           Include retired orgs (ignored unless 
                                 list-children or list-all-descendants is 
                                 the selected action)

'''

import sys
from docopt import docopt
import json
import dateutil
from netaddr import IPNetwork, IPRange, IPSet

from cyhy.core import Config, STATUS, STAGE
from cyhy.db import database, CHDatabase
from cyhy.util import util

def parse_addresses(addresses):
    nets = IPSet()
    for a in addresses:
        a = a.split('#',1)[0] # remove comments
        a = a.strip()
        if not a:
            # skip blank lines
            continue
        if a.find('-') != -1:
            # handle a range
            start, end = a.split('-')
            rng = PRange(start.strip(), end.strip())
            for i in rng.cidrs():
                nets.add(i)
        else:
            # handle single cidr
            net = IPNetwork(a)
            nets.add(net)
    return nets

def already_exists(db, request):
    owner = request['_id']
    db_request = db.RequestDoc.get_by_owner(owner)
    if db_request:
        return True

def import_child_request(db, parent_org_request, child_org_request):
    if already_exists(db, child_org_request):
        print 'ERROR: Child organization %s already exists in database' % child_org_request['_id']
        return False
    child_org_request['period_start'] = dateutil.parser.parse(child_org_request['period_start'])
    child_org_nets = IPSet(child_org_request['networks'])
    intersecting_cidrs = child_org_nets & parent_org_request.networks
    child_org_outlier_cidrs = child_org_nets - parent_org_request.networks

    if not util.warn_and_confirm('This will modify database documents.  You should PAUSE the CyHy commander before continuing.'):
        print 'Aborted.'
        sys.exit(-2)

    ch_db = CHDatabase(db)
    # Change owner on all relevant documents
    ch_db.change_ownership(parent_org_request['_id'], child_org_request['_id'], intersecting_cidrs, 'host owner changed')
    # Remove the intersecting_cidrs from the parent org's request doc
    parent_org_request.remove_networks(intersecting_cidrs)
    # Set child_org_request's networks to only include the intersecting_cidrs; we don't want the child_org_outlier_cidrs in there
    child_org_request['networks'] = intersecting_cidrs.iter_cidrs()

    if child_org_outlier_cidrs:
        print '\nWARNING: The following networks are NOT part of the parent org (%s) and are NOT being added to the child organization (%s):' % (parent_org_request['_id'], child_org_request['_id'])
        for net in child_org_outlier_cidrs.iter_cidrs():
            print '\t %s' % net
        print 'Manually add these networks with this command:'
        outliers_str = ' '.join([str(x) for x in child_org_outlier_cidrs.iter_cidrs()])
        print ' cyhy-ip add %s %s' % (child_org_request['_id'], outliers_str)

    child_org_request_doc = db.RequestDoc()
    util.copy_attrs(child_org_request, child_org_request_doc)
    child_org_request_doc.save()
    # Add the new child_org's id to the list of children in the parent_org_request
    parent_org_request.add_children(db, [child_org_request['_id']])
    parent_org_request.save()

    # Sync parent_org's tally
    parent_org_tally = db.TallyDoc.get_by_owner(parent_org_request['_id'])
    if not parent_org_tally:
        print 'WARNING: Organization %s does NOT have a tally document!' % parent_org_request['_id']
    else:
        print 'Syncing tally for %s' % parent_org_request['_id']
        parent_org_tally.sync(db)

    # Create tally doc for new child_org
    child_org_tally = db.TallyDoc()
    child_org_tally['_id'] = child_org_request['_id']
    print 'Creating new tally for %s' % child_org_request['_id']
    child_org_tally.sync(db)
    return True

def import_child_file(db, parent_org_request, filename):
    f = open(filename, 'rb')
    child_org_request = json.load(f)
    f.close()
    return import_child_request(db, parent_org_request, child_org_request)

def add_children(db, parent_org_request, child_ids):
    for child in child_ids:
        if not db.RequestDoc.find_one({'_id':child}):
            print 'ERROR: Child organization %s not found in DB. EXITING without making any changes.' % child
            return False
        if child == parent_org_request['_id']:
            print 'ERROR: Cannot add own id (%s) to list of children. EXITING without making any changes.' % child
            return False
        if parent_org_request.get('children') and child in parent_org_request['children']:
            print 'ERROR: Child (%s) cannot be added; it is already in list of children of %s. EXITING without making any changes.' % (child, parent_org_request['_id'])
            return False
        if parent_org_request['_id'] in db.RequestDoc.get_all_descendants(child):
            print 'ERROR: Parent org (%s) is already a descendant of %s - no circular relationships allowed! EXITING without making any changes.' % (parent_org_request['_id'], child)
            return False

    parent_org_request.add_children(db, child_ids)
    parent_org_request.save()
    return True

def remove_children(db, parent_org_request, child_ids):
    if not parent_org_request.get('children'):
        print 'ERROR: %s has no children to remove. EXITING without making any changes.' % parent_org_request['_id']
        return False
    for child in child_ids:
        if parent_org_request.get('children') and child not in parent_org_request['children']:
            print 'ERROR: Child (%s) cannot be removed; it is NOT in list of children of %s. EXITING without making any changes.' % (child, parent_org_request['_id'])
            return False

    parent_org_request.remove_children(child_ids)
    parent_org_request.save()
    return True

def list_children(db, parent_org_request, include_retired):
    if parent_org_request.get('children'):
        for child in parent_org_request['children']:
            if include_retired or not db.RequestDoc.get_by_owner(child).get('retired'):
                print child

def list_all_descendants(db, parent_org_id, include_retired):
    for descendant in db.RequestDoc.get_all_descendants(parent_org_id,
                                                        include_retired):
        print descendant

def main():
    args = docopt(__doc__, version='v0.0.1')
    db = database.db_from_config(args['--section'])

    parent_org_id = args['PARENT_ORG_ID']
    parent_org_request = db.RequestDoc.find_one({'_id':parent_org_id})
    if parent_org_request == None:
        print 'ERROR: Parent organization %s not found in DB' % parent_org_id
        sys.exit(-1)

    if args['import-child']:
        success = import_child_file(db, parent_org_request, args['CHILD_ORG_IMPORT_FILE'])
    elif args['add-children']:
        success = add_children(db, parent_org_request, args['CHILD_ORG_IDS'])
    elif args['remove-children']:
        success = remove_children(db, parent_org_request, args['CHILD_ORG_IDS'])
    elif args['list-children']:
        list_children(db, parent_org_request, args['--include-retired'])
        sys.exit(0)
    elif args['list-all-descendants']:
        list_all_descendants(db, parent_org_id, args['--include-retired'])
        sys.exit(0)

    if not success:
        sys.exit(-1)
    else:
        print 'SUCCESS!'

if __name__=='__main__':
    main()
