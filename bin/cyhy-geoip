#!/usr/bin/env python
"""Cyber Hygiene GeoIP maintenance tool.

Usage:
  cyhy-geoip [--section SECTION]
  cyhy-geoip (-h | --help)

Options:
  -h --help                      Show this screen.
  -s SECTION --section=SECTION   Configuration section to use.
"""

import logging

from docopt import docopt
from netaddr import ip, IPNetwork, IPRange, IPSet
import pymongo

from cyhy.core.geoloc import GeoLocDB
from cyhy.db import database
from cyhy.util import util


def munge(x):
    """Munges a tuple or list of IPNetwork and IPRange objects into a single IPSet.

    Args:
        x: A Python tuple or list containing IPNetwork and IPRange objects

    Returns:
        An IPSet corresponding to the Python tuple or list that was passed
        in.
    """
    ans = []
    for i in x:
        # IPSet doesn't like it when an IPRange appears in the tuple
        # or list in its constructor.  It only likes IPNetworks.
        if isinstance(i, IPRange):
            ans.extend(i.cidrs())
        else:
            ans.append(i)
    return IPSet(ans)


UPDATE_INCREMENT = 100000
LOG_FILE = "/var/log/cyhy/geoip.log"
# Only IPV4_LOOPBACK and IPV4_RESERVED need to be munged, since the
# others are not lists or tuples
SPECIAL_RANGES = {
    "IPv4 Loopback": IPSet(ip.IPV4_LOOPBACK),
    "IPv4 Private": munge(ip.IPV4_PRIVATE),
    "IPv4 Link Local": IPSet(ip.IPV4_LINK_LOCAL),
    "IPv4 Multicast": IPSet(ip.IPV4_MULTICAST),
    "IPv4 6 to 4": IPSet(ip.IPV4_6TO4),
    "IPv4 Reserved": munge(ip.IPV4_RESERVED),
}

logger = logging.getLogger("cyhy-geoip")
util.setup_logging(logging.INFO, filename=LOG_FILE)


def get_special_intersections(cidrs):
    results = {}  # {request: IPSet of intersections}
    for description, special_set in SPECIAL_RANGES.items():
        intersection = special_set & cidrs
        if intersection:
            results[description] = intersection
    return results


def main():
    args = docopt(__doc__, version="v0.0.1")

    cyhy_db = database.db_from_config(args["--section"])
    geoip_db = GeoLocDB()

    hosts = cyhy_db.HostDoc.find()
    total_documents = hosts.count()

    logger.info(
        "Beginning update of GeoIP data in hosts collection [{} document(s)]".format(
            total_documents
        )
    )

    total_processed = 0
    total_updated = 0
    for host in hosts:
        intersections = get_special_intersections(IPSet([host["ip"]]))
        if intersections:
            for request, intersecting_cidrs in intersections.iteritems():
                logger.info(
                    "{} found in private IP block {}".format(
                        str(intersecting_cidrs), request
                    )
                )
        # lookup() returns a tuple but the host object stores it as a list
        new_loc = list(geoip_db.lookup(host.ip))
        if new_loc != host["loc"]:
            old_loc = host["loc"]
            host["loc"] = new_loc
            host.save()
            total_updated += 1
            logger.info(
                "Host %s location changed from [%s, %s] to [%s, %s]",
                host["ip"],
                str(old_loc[0]),
                str(old_loc[1]),
                str(new_loc[0]),
                str(new_loc[1]),
            )

        total_processed += 1
        if (total_processed % UPDATE_INCREMENT) == 0:
            logger.info(
                "Processed {}/{} host documents ({} updated)".format(
                    total_processed, total_documents, total_updated
                )
            )

    logger.info("Finished update with %d record(s) updated", total_updated)


if __name__ == "__main__":
    main()
