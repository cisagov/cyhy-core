#!/usr/bin/env python
"""Manage CyHy ticket data.

Usage:
  cyhy-ticket [--section SECTION] [--file FILENAME] (list-false-positive | set-false-positive) [ADDRESSES ...]
  cyhy-ticket (-h | --help)
  cyhy-ticket --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.

  -f FILENAME --file=FILENAME    Read addresses from a file.
  -s SECTION --section=SECTION   Configuration section to use.

NOTE: set-false-positive can be used to set the false_positive flag to True or False
"""

from __future__ import print_function

import datetime
import sys

from bson import ObjectId
from bson.errors import InvalidId
from docopt import docopt
from netaddr import IPNetwork, IPRange, IPSet

from cyhy.db import database
from cyhy.util import util

FP_EXPIRATION_DAYS_DEFAULT = 365  # Days a false-positive ticket is effective for
SEVERITY_LEVELS = ["Info", "Low", "Medium", "High", "Critical"]


def parse_addresses(addresses):
    """Parse the provided addresses to create an IPSet."""
    nets = IPSet()
    for addr in addresses:
        addr = addr.split("#", 1)[0]  # remove comments
        addr = addr.strip()
        if not addr:
            # skip blank lines
            continue
        if addr.find("-") != -1:
            # handle a range
            start, end = addr.split("-")
            ip_range = IPRange(start.strip(), end.strip())
            for ip_addr in ip_range.cidrs():
                nets.add(ip_addr)
        else:
            # handle single cidr
            net = IPNetwork(addr)
            nets.add(net)
    return nets


def read_file(filename):
    """Read in the given file's lines."""
    with open(filename) as f:
        file_data = f.readlines()
    return parse_addresses(file_data)


def print_ticket_details(tickets):
    """Print the details for the provided tickets."""
    print(
        "{:<26}{:<7}{:<7}{:<19}{:<10}{:<14}{:<15}{:<7}{:<10}{:}".format(
            "Ticket ID",
            "Open?",
            "FP?",
            "Time Opened (UTC)",
            "Severity",
            "FP Effective",
            "FP Expiration",
            "Port",
            "Protocol",
            "Vulnerability Name",
        )
    )

    for ticket in tickets:
        ticket["open_flag_str"] = str(ticket["open"])
        ticket["fp_flag_str"] = str(ticket["false_positive"])
        ticket["severity_str"] = SEVERITY_LEVELS[ticket["details"]["severity"]]
        if ticket["false_positive"]:
            (
                ticket["fp_effective_date"],
                ticket["fp_expiration_date"],
            ) = ticket.false_positive_dates
            print(
                "{_id:<26}{open_flag_str:<7}{fp_flag_str:<7}".format(**ticket),
                "{time_opened:%Y-%m-%d %H:%M}   ".format(**ticket),
                "{severity_str:<10}{fp_effective_date:%Y-%m-%d}    ".format(**ticket),
                "{fp_expiration_date:%Y-%m-%d}     ".format(**ticket),
                "{port:<7}{protocol:<10}{details[name]}".format(**ticket),
                sep="",
            )
        else:
            ticket["fp_effective_date"], ticket["fp_expiration_date"] = None, None
            print(
                "{_id:<26}{open_flag_str:<7}".format(**ticket),
                "{fp_flag_str:<7}".format(**ticket),
                "{time_opened:%Y-%m-%d %H:%M}   ".format(**ticket),
                "{severity_str:<39}{port:<7}".format(**ticket),
                "{protocol:<10}{details[name]}".format(**ticket),
                sep="",
            )

        ticket.pop(
            "fp_effective_date"
        )  # Don't want these fields getting saved back to the DB
        ticket.pop("fp_expiration_date")
        ticket.pop("open_flag_str")
        ticket.pop("fp_flag_str")
        ticket.pop("severity_str")


def list_false_positive(mongo_db, cidrs):
    """Print the false positives for the given CIDRs if they exist."""
    for cidr in cidrs.iter_cidrs():
        for ip_addr in cidr:
            tickets = list(
                mongo_db.TicketDoc.find(
                    {"ip_int": int(ip_addr), "false_positive": True}
                )
            )
            if not tickets:
                print("{} has no false-positive tickets\n".format(ip_addr))
            else:
                tickets.sort(
                    key=lambda x: (
                        x["details"]["severity"],
                        x["open"],
                        x["time_opened"],
                    ),
                    reverse=True,
                )
                print(
                    "\nFalse-positive tickets for {!s} ({}):".format(
                        ip_addr, tickets[0]["owner"]
                    )
                )
                print_ticket_details(tickets)
                print()


def set_false_positive(mongo_db, cidrs):
    """Find and set false positives for the given CIDRs."""
    for cidr in cidrs.iter_cidrs():
        for ip_addr in cidr:
            tickets = list(mongo_db.TicketDoc.find({"ip_int": int(ip_addr)}))

            if not tickets:
                print(
                    "No vulnerability tickets found for {!s} - SKIPPING!\n".format(
                        ip_addr
                    )
                )
                break  # Move on to next ip (if present)

            while True:
                tickets.sort(
                    key=lambda x: (
                        x["details"]["severity"],
                        x["open"],
                        x["time_opened"],
                    ),
                    reverse=True,
                )
                print("\nTickets for {!s} ({}):".format(ip_addr, tickets[0]["owner"]))
                print_ticket_details(tickets)

                # choose vuln ticket ID
                # MIGRATION : raw_input() becomes input() in Python 3
                ticket_id = raw_input(
                    "Enter ticket id or press return if done with this IP address: "
                )
                if not ticket_id:
                    print("Done with {}\n".format(ip_addr))
                    break  # Move on to next ip (if present)
                try:
                    golden_ticket_id = ObjectId(ticket_id)
                except (InvalidId, TypeError):
                    print("Invalid ticket id provided: ", ticket_id, file=sys.stderr)
                else:
                    valid_ticket_id = False
                    for ticket in tickets:
                        if golden_ticket_id == ticket["_id"]:
                            valid_ticket_id = True
                            golden_ticket = ticket
                            # Found our ticket. Now ask if the user wants to flip
                            # the false_positive flag
                            break

                    if not valid_ticket_id:
                        print(
                            "ERROR: TicketID {} is not valid for {}".format(
                                golden_ticket_id, ip_addr,
                            )
                        )
                    else:
                        # retrieve current false_positive flag value & ask if user wants to flip it
                        print(
                            "\nfalse_positive flag for {} is currently: {}".format(
                                golden_ticket_id, golden_ticket["false_positive"],
                            )
                        )

                        # MIGRATION : raw_input() becomes input() in Python 3
                        yes = raw_input(
                            'Type "yes" to flip the false_positive flag for '
                            + '{} from "{}" to "{}": '.format(
                                golden_ticket_id,
                                golden_ticket["false_positive"],
                                not golden_ticket["false_positive"],
                            )
                        )

                        if yes != "yes":
                            print(
                                "\nfalse_positive flag for {} was NOT".format(
                                    golden_ticket_id
                                ),
                                ' modified from current value of "{}".'.format(
                                    golden_ticket["false_positive"],
                                ),
                            )
                            # Go back to start of while loop
                            # (show open tickets for this ip)
                            continue

                        # MIGRATION : raw_input() becomes input() in Python 3
                        reason = raw_input(
                            "Enter the reason why you are changing the false_positive flag: "
                        )

                        fp_expiration_days = FP_EXPIRATION_DAYS_DEFAULT
                        valid_expiration_days = False
                        if not golden_ticket["false_positive"]:
                            while not valid_expiration_days:
                                fp_expiration_date = util.utcnow() + datetime.timedelta(
                                    days=fp_expiration_days
                                )
                                print(
                                    "\nDefault is {} days until the".format(
                                        FP_EXPIRATION_DAYS_DEFAULT
                                    ),
                                    "false_positive expires [{}].".format(
                                        fp_expiration_date.strftime("%Y-%m-%d"),
                                    ),
                                )
                                # MIGRATION : raw_input() becomes input() in Python 3
                                expiration_input = raw_input(
                                    "Enter a new number of days or press "
                                    + "return to accept the default: "
                                )
                                if expiration_input:
                                    try:
                                        fp_expiration_days = int(expiration_input)
                                        if fp_expiration_days < 1:
                                            raise ValueError(
                                                "Days until the false_positive"
                                                + " expires must be an integer"
                                                + " greater than zero!"
                                            )
                                        valid_expiration_days = True
                                    except ValueError:
                                        fp_expiration_days = FP_EXPIRATION_DAYS_DEFAULT
                                        print(
                                            "ERROR: Number of days until the",
                                            "false_positive expires must be an",
                                            "integer greater than zero!",
                                            file=sys.stderr,
                                        )
                                else:  # Just use FP_EXPIRATION_DAYS_DEFAULT
                                    valid_expiration_days = True
                            fp_expiration_date = util.utcnow() + datetime.timedelta(
                                days=fp_expiration_days
                            )
                            print(
                                "\nThe false_positive flag will automatically",
                                "reset to false in {} days [{}].".format(
                                    fp_expiration_days,
                                    fp_expiration_date.strftime("%Y-%m-%d"),
                                ),
                            )

                        # update ticket in DB
                        golden_ticket.set_false_positive(
                            not golden_ticket["false_positive"],
                            reason,
                            fp_expiration_days,
                        )
                        golden_ticket.save()

                        print("\nfalse_positive flag successfully changed!")
                        upd_ticket = mongo_db.TicketDoc.find(
                            {"_id": golden_ticket["_id"]}
                        )
                        print(
                            "false_positive flag for {!s} is now set to: {!s}".format(
                                golden_ticket_id, upd_ticket[0]["false_positive"],
                            )
                        )


def main():
    """Provide tools to manage false positives for tickets in the database."""
    args = docopt(__doc__, version="v0.0.1")
    mongo_db = database.db_from_config(args["--section"])

    nets = parse_addresses(args["ADDRESSES"])
    if args["--file"] is not None:
        f_nets = read_file(args["--file"])
        nets.update(f_nets)
    elif not nets:
        nets.update(parse_addresses(sys.stdin.readlines()))

    if args["list-false-positive"]:
        list_false_positive(mongo_db, nets)
    elif args["set-false-positive"]:
        set_false_positive(mongo_db, nets)

    # import IPython; IPython.embed() #<<< BREAKPOINT >>>


if __name__ == "__main__":
    main()
