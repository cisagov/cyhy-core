#!/usr/bin/env python
"""Manage CyHy ticket data

Usage:
  cyhy-ticket [--section SECTION] [--file FILENAME] (list-false-positive | set-false-positive) [ADDRESSES ...]
  cyhy-ticket (-h | --help)
  cyhy-ticket --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.

  -f FILENAME --file=FILENAME    Read addresses from a file.
  -s SECTION --section=SECTION   Configuration section to use.

NOTE: set-false-positive can be used to set the false_positive flag to True or False
"""

from __future__ import print_function

import datetime
import sys

from bson import ObjectId
from docopt import docopt
from netaddr import IPNetwork, IPRange, IPSet

from cyhy.db import database
from cyhy.util import util

FP_EXPIRATION_DAYS_DEFAULT = 365  # Days a false-positive ticket is effective for
SEVERITY_LEVELS = ["Info", "Low", "Medium", "High", "Critical"]


def parse_addresses(addresses):
    nets = IPSet()
    for a in addresses:
        a = a.split("#", 1)[0]  # remove comments
        a = a.strip()
        if not a:
            # skip blank lines
            continue
        if a.find("-") != -1:
            # handle a range
            start, end = a.split("-")
            rng = IPRange(start.strip(), end.strip())
            for i in rng.cidrs():
                nets.add(i)
        else:
            # handle single cidr
            net = IPNetwork(a)
            nets.add(net)
    return nets


def read_file(filename):
    f = open(filename, "r")
    return parse_addresses(f.readlines())


def print_ticket_details(tickets):
    print(
        "{:<26}{:<7}{:<7}{:<19}{:<10}{:<14}{:<15}{:<7}{:<10}{:}".format(
            "Ticket ID",
            "Open?",
            "FP?",
            "Time Opened (UTC)",
            "Severity",
            "FP Effective",
            "FP Expiration",
            "Port",
            "Protocol",
            "Vulnerability Name",
        )
    )

    for t in tickets:
        t["open_flag_str"] = str(t["open"])
        t["fp_flag_str"] = str(t["false_positive"])
        t["severity_str"] = SEVERITY_LEVELS[t["details"]["severity"]]
        if t["false_positive"]:
            t["fp_effective_date"], t["fp_expiration_date"] = t.false_positive_dates
            print(
                "{_id:<26}{open_flag_str:<7}{fp_flag_str:<7}{time_opened:%Y-%m-%d %H:%M}   {severity_str:<10}{fp_effective_date:%Y-%m-%d}    {fp_expiration_date:%Y-%m-%d}     {port:<7}{protocol:<10}{details[name]}".format(
                    **t
                )
            )
        else:
            t["fp_effective_date"], t["fp_expiration_date"] = None, None
            print(
                "{_id:<26}{open_flag_str:<7}{fp_flag_str:<7}{time_opened:%Y-%m-%d %H:%M}   {severity_str:<39}{port:<7}{protocol:<10}{details[name]}".format(
                    **t
                )
            )

        t.pop(
            "fp_effective_date"
        )  # Don't want these fields getting saved back to the DB
        t.pop("fp_expiration_date")
        t.pop("open_flag_str")
        t.pop("fp_flag_str")
        t.pop("severity_str")


def list_false_positive(db, cidrs):
    for cidr in cidrs.iter_cidrs():
        for ip in cidr:
            tickets = list(
                db.TicketDoc.find({"ip_int": int(ip), "false_positive": True})
            )
            if not tickets:
                print("{!s} has no false-positive tickets\n".format(ip))
            else:
                tickets.sort(
                    key=lambda x: (
                        x["details"]["severity"],
                        x["open"],
                        x["time_opened"],
                    ),
                    reverse=True,
                )
                print(
                    "\nFalse-positive tickets for {!s} ({}):".format(
                        ip, tickets[0]["owner"]
                    )
                )
                print_ticket_details(tickets)
                print()


def set_false_positive(db, cidrs):
    for cidr in cidrs.iter_cidrs():
        for ip in cidr:
            tickets = list(db.TicketDoc.find({"ip_int": int(ip)}))

            if not tickets:
                print(
                    "No vulnerability tickets found for {!s} - SKIPPING!\n".format(ip)
                )
                break  # Move on to next ip (if present)

            while True:
                tickets.sort(
                    key=lambda x: (
                        x["details"]["severity"],
                        x["open"],
                        x["time_opened"],
                    ),
                    reverse=True,
                )
                print("\nTickets for {!s} ({}):".format(ip, tickets[0]["owner"]))
                print_ticket_details(tickets)

                # choose vuln ticket ID
                # MIGRATION : raw_input() becomes input() in Python 3
                r = raw_input(
                    "Enter ticket id or press return if done with this IP address: "
                )
                if not r:
                    print("Done with {!s}\n".format(ip))
                    break  # Move on to next ip (if present)
                try:
                    golden_ticketID = ObjectId(r)
                except Exception:
                    print("Invalid ticket id provided: ", r, file=sys.stderr)
                else:
                    valid_ticketID = False
                    for t in tickets:
                        if golden_ticketID == t["_id"]:
                            valid_ticketID = True
                            golden_ticket = t
                            break  # Found our ticket, now ask if the user wants to flip the false_positive flag

                    if not valid_ticketID:
                        print(
                            "ERROR: TicketID {!s} is not valid for {!s}".format(
                                golden_ticketID, ip,
                            )
                        )
                    else:
                        # retrieve current false_positive flag value & ask if user wants to flip it
                        print(
                            "\nfalse_positive flag for {!s} is currently: {!s}".format(
                                golden_ticketID, golden_ticket["false_positive"],
                            )
                        )

                        # MIGRATION : raw_input() becomes input() in Python 3
                        yes = raw_input(
                            'Type "yes" to flip the false_positive flag for %s from "%s" to "%s": '
                            % (
                                golden_ticketID,
                                golden_ticket["false_positive"],
                                not golden_ticket["false_positive"],
                            )
                        )

                        if yes != "yes":
                            print(
                                '\nfalse_positive flag for {!s} was NOT modified from current value of "{!s}".'.format(
                                    golden_ticketID, golden_ticket["false_positive"],
                                )
                            )
                            continue  # Go back to start of while loop (show open tickets for this ip)

                        # MIGRATION : raw_input() becomes input() in Python 3
                        reason = raw_input(
                            "Enter the reason why you are changing the false_positive flag: "
                        )

                        fp_expiration_days = FP_EXPIRATION_DAYS_DEFAULT
                        valid_expiration_days = False
                        if not golden_ticket["false_positive"]:
                            while not valid_expiration_days:
                                fp_expiration_date = util.utcnow() + datetime.timedelta(
                                    days=fp_expiration_days
                                )
                                print(
                                    "\nDefault is {!s} days until the false_positive expires [{!s}].".format(
                                        FP_EXPIRATION_DAYS_DEFAULT,
                                        fp_expiration_date.strftime("%Y-%m-%d"),
                                    )
                                )
                                # MIGRATION : raw_input() becomes input() in Python 3
                                expiration_input = raw_input(
                                    "Enter a new number of days or press return to accept the default: "
                                )
                                if expiration_input:
                                    try:
                                        fp_expiration_days = int(expiration_input)
                                        if fp_expiration_days < 1:
                                            raise ValueError(
                                                "Days until the false_positive expires must be an integer greater than zero!"
                                            )
                                        valid_expiration_days = True
                                    except Exception:
                                        fp_expiration_days = FP_EXPIRATION_DAYS_DEFAULT
                                        print(
                                            "ERROR: Number of days until the false_positive expires must be an integer greater than zero!",
                                            file=sys.stderr,
                                        )
                                else:  # Just use FP_EXPIRATION_DAYS_DEFAULT
                                    valid_expiration_days = True
                            fp_expiration_date = util.utcnow() + datetime.timedelta(
                                days=fp_expiration_days
                            )
                            print(
                                "\nThe false_positive flag will automatically reset to false in {!s} days [{!s}].".format(
                                    fp_expiration_days,
                                    fp_expiration_date.strftime("%Y-%m-%d"),
                                )
                            )

                        # update ticket in DB
                        golden_ticket.set_false_positive(
                            not golden_ticket["false_positive"],
                            reason,
                            fp_expiration_days,
                        )
                        golden_ticket.save()

                        print("\nfalse_positive flag successfully changed!")
                        upd_ticket = db.TicketDoc.find({"_id": golden_ticket["_id"]})
                        print(
                            "false_positive flag for {!s} is now set to: {!s}".format(
                                golden_ticketID, upd_ticket[0]["false_positive"],
                            )
                        )


def main():
    args = docopt(__doc__, version="v0.0.1")
    db = database.db_from_config(args["--section"])

    nets = parse_addresses(args["ADDRESSES"])
    if args["--file"] is not None:
        f_nets = read_file(args["--file"])
        nets.update(f_nets)
    elif not nets:
        nets.update(parse_addresses(sys.stdin.readlines()))

    if args["list-false-positive"]:
        list_false_positive(db, nets)
    elif args["set-false-positive"]:
        set_false_positive(db, nets)

    # import IPython; IPython.embed() #<<< BREAKPOINT >>>


if __name__ == "__main__":
    main()
