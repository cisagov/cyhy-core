#!/usr/bin/env python
"""Import a scan request document.

Usage:
  cyhy-import [--section SECTION] [--force] [--init-stage STAGE] [FILE]
  cyhy-import (-h | --help)
  cyhy-import --version

Options:
  -h --help                      Show this screen.
  --version                      Show version.

  -i STAGE --init-stage STAGE    Override the init-stage specified in file
  -f --force                     Force import of existing request, destroying original
  -s SECTION --section=SECTION   Configuration section to use.

Notes:
  If no FILE is specified, the document will be read from standard in.

"""

from __future__ import print_function

# Standard Python Libraries
import datetime
import json
import sys

# Third-Party Libraries
import dateutil
from docopt import docopt
import progressbar as pb
import netaddr

# cisagov Libraries
from cyhy.db import database
from cyhy.util import util

PB_INIT_WIDGETS = [
    "Importing: ",
    pb.SimpleProgress(),
    " ",
    # MIGRATION : unichr becomes chr in Py3
    pb.Bar(marker=unichr(0x25B6)),
    " ",
    pb.ETA(),
]

DAYS_OF_WEEK = [
    "sunday",
    "monday",
    "tuesday",
    "wednesday",
    "thursday",
    "friday",
    "saturday",
]


def already_exists(mongo_db, request):
    """Check if a request document for an owner already exists."""
    owner = request["_id"]
    db_request = mongo_db.RequestDoc.get_by_owner(owner)
    if db_request:
        return True
    return False


def print_intersections(intersections):
    """Print all IP range intersections."""
    for request, cidrs in intersections.items():
        print(
            "{} ({}): {}".format(request["agency"]["name"], request["_id"], len(cidrs))
        )
        for i in cidrs.iter_cidrs():
            print("\t", i)


def has_intersections(mongo_db, nets, filename, owner):
    """Check if IPs to import already exist in the database."""
    intersections = mongo_db.RequestDoc.get_all_intersections(nets)
    if not intersections:
        return False
    if len(intersections) == 1 and intersections.keys()[0]["_id"] == owner:
        return False

    print("Cannot import {}\nSome addresses already allocated:".format(filename))
    print_intersections(intersections)
    return True


def import_request(mongo_db, request, source, force=False, init_stage=None):
    """Try to import the given request into the database."""
    owner = request["_id"]
    if not force and already_exists(mongo_db, request):
        print("Cannot import, owner already exists: {}".format(owner))
        print("Use --force to destroy the currently stored document")
        print("and replace it with the imported version.")
        return False
    request["period_start"] = dateutil.parser.parse(request["period_start"])
    nets = netaddr.IPSet(request["networks"])
    if init_stage:
        request["init_stage"] = init_stage
    if has_intersections(mongo_db, nets, source, owner):
        return False
    request["networks"] = nets.iter_cidrs()

    for window in request["windows"]:
        if window["day"].lower() not in DAYS_OF_WEEK:
            print(
                "Scan window day '{}' must be a day of the week.".format(window["day"])
            )
            return False
        if not isinstance(window["duration"], int) or window["duration"] < 1:
            print(
                "Scan window duration '{}' must be a positive whole number.".format(
                    window["duration"]
                )
            )
            return False
        try:
            datetime.datetime.strptime(window["start"], "%H:%M:%S")
        except Exception:
            print("Scan window start time '{}' is invalid.".format(window["start"]))
            return False

    doc = mongo_db.RequestDoc()
    util.copy_attrs(request, doc)
    doc.save()
    return True


def import_file(mongo_db, filename, force, init_stage=None):
    """Get the request from a file."""
    with open(filename, "rb") as f:
        request = json.load(f)
    return import_request(mongo_db, request, filename, force, init_stage)


def import_stdin(mongo_db, force, init_stage=None):
    """Get the request from standard input."""
    request = json.load(sys.stdin)
    return import_request(mongo_db, request, "from stdin", force, init_stage)


def main():
    """Import a request from a file or standard input into the database."""
    args = docopt(__doc__, version="v0.0.1")
    mongo_db = database.db_from_config(args["--section"])

    if args["FILE"] is not None:
        success = import_file(
            mongo_db, args["FILE"], args["--force"], args["--init-stage"]
        )
    else:
        success = import_stdin(mongo_db, args["--force"], args["--init-stage"])

    if not success:
        sys.exit(-1)


if __name__ == "__main__":
    main()
